name: "Prototype Groups"
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Check"]
    types:
      - completed
  push:
    branches:
      - main

jobs:
  validate:
    name: "Validate"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'

    permissions:
      contents: read
      actions: read
      issues: write
      pull-requests: write

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Compile TypeScript sources
        uses: ./.github/actions/build

      - name: Delete existing groups.yaml
        if: github.event_name == 'workflow_run'
        run: |
          echo "${{ toJson(github.event.workflow_run) }}"
          rm ./config/groups.yaml

      - name: Download PR artifact
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: groups.yaml
          path: ./config/
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate configuration
        if: github.event_name == 'workflow_run'
        run: npm run validate
        env:
          CANVAS_TOKEN: ${{ secrets.CANVAS_TOKEN }}

      - name: "Post changes as PR comment"
        if: github.event_name == 'workflow_run'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let fs = require('fs');
            let markdown = 'changes.md';
            let issue_number = ${{ github.event.workflow_run.pull_requests[0].number }};

            if (fs.existsSync(markdown)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: fs.readFileSync('changes.md', 'utf-8')
              });
            }

  apply:
    name: "Apply"
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_run' && github.ref == 'refs/heads/main'

    concurrency:
      group: "canvas-update"
      cancel-in-progress: false

    permissions:
      contents: write

    steps:
      - name: Get token for sepp-bot
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.SEPP_BOT_ID }}
          private-key: ${{ secrets.SEPP_BOT_PK }}

      - name: Clone repository
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Compile TypeScript sources
        uses: ./.github/actions/build

      - name: "Apply changes"
        run: npm run apply
        env:
          CANVAS_TOKEN: ${{ secrets.CANVAS_TOKEN }}

      - name: Format group configuration file
        run: npm run format-config

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Check for changes and commit them
        run: |
          if [ ! -z "$(git status --porcelain)" ]; then
            git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
            git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'
            git add ./config/groups.yaml
            git commit -m "Update configuration with Canvas IDs"
            git push -u origin "HEAD:${{ github.ref }}"
          fi
